data <- data[-1]
View(data)
data$Gender <- ifelse(data$Gender=="Male",1,0)
summary(data)
normalisation(data,"EstimatedSalary")
data_0 <- normalisation(data,"EstimatedSalary")
data0 <- normalisation(data,"EstimatedSalary")
rm(data_0)
#train-test split
sample <- sample.split(data0,.7)
train <- data0[sample,]
test <- data0[!sample,]
#train-test split
sample <- sample.split(data0$Purchased,.7)
train <- data0[sample,]
test <- data0[!sample,]
prop.table(data0$Purchased)
prop.table(table(data0$Purchased))
#svm with default parameters
model1 <- svm(Purchased~.,data = data0)
predict1 <- predict(model1,test)
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
predict1 <- predict(model1,test,type="response")
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
predict1 <- predict(model1,test$Purchased)#,type="response")
#svm with default parameters
model1 <- svm(Purchased~.,data = train)
predict1 <- predict(model1,test)#,type="response")
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
predict1 <- predict(model1,test,type="response")
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
#svm with default parameters
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test)#,type="response")
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
Accuracy(predict1,test$Purchased)
10^(-2:3)
#hyper parameter tuning
tune.model <- tune(svm,Purchased~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
#train-test split
data$Purchased <- as.factor(data$Purchased)
sample <- sample.split(data0$Purchased,.7)
train <- data0[sample,]
test <- data0[!sample,]
data0$Purchased <- as.factor(data0$Purchased)
sample <- sample.split(data0$Purchased,.7)
train <- data0[sample,]
test <- data0[!sample,]
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test)#,type="response")
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
Accuracy(predict1,test$Purchased)
tune.model <- tune(svm,Purchased~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
summary(tune.model)
AUC(predict1,test$Purchased)
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test)#,type="response")
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
Accuracy(predict1,test$Purchased)
AUC(predict1,test$Purchased)
(tune.model)
summary(tune.model)
model2 <- svm(Purchased~.,data = train,type="C",cost=10,kernel="radial")
predict2 <- predict(model2,test)#,type="response")
summary(model2)
ConfusionMatrix(predict2,test$Purchased)
Accuracy(predict2,test$Purchased)
AUC(predict2,test$Purchased)
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test)#,type="response")
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
Accuracy(predict1,test$Purchased)
AUC(predict1,test$Purchased)
tune.model <- tune(svm,Purchased~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
(tune.model)
model2 <- svm(Purchased~.,data = train,type="C",cost=10,kernel="radial")
predict2 <- predict(model2,test)#,type="response")
summary(model2)
ConfusionMatrix(predict2,test$Purchased)
Accuracy(predict2,test$Purchased)
AUC(predict2,test$Purchased)
library(pROC)
AUC(predict2,test$Purchased)
roc(predict2,test$Purchased)
predict2
predict2
typeof(predict2)
roc(as.factor(predict2),test$Purchased)
roc(test$Purchased,predict2)
roc(test$Purchased,predict2)
C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=c(.5,1,2)))
tune.model1 <- tune(svm,Purchased~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=c(.5,1,2)))
summary(tune.model1)
tune.model1 <- tune(svm,Purchased~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=seq(0,1,.1)))
summary(tune.model1)
model3 <- svm(Purchased~.,data = train,type="C",cost=100,kernel="radial",gamma=0.2)
predict3 <- predict(model3,test)#,type="response")
summary(model3)
ConfusionMatrix(predict3,test$Purchased)
Accuracy(predict3,test$Purchased)
AUC(predict3,test$Purchased)
model2 <- svm(Purchased~.,data = train,type="C",cost=10,kernel="radial")
predict2 <- predict(model2,test)#,type="response")
summary(model2)
ConfusionMatrix(predict2,test$Purchased)
Accuracy(predict2,test$Purchased)
AUC(predict2,test$Purchased)
predict3_prob <- predict(model3,test,type="response")
predict3_prob <- predict(model3,test[-4],type="response")
predict3_prob <- predict(model3,test[-4],type="prob")
rm(predict3_prob)
roc_svm_test <- roc(test$Purchased,as.numeric(predict3))
plot(roc_svm_test, add = TRUE,col = "red", print.auc=TRUE, print.auc.x = 0.5, print.auc.y = 0.3)
plot(roc_svm_test, add = TRUE,col = "red", print.auc=TRUE, print.auc.x = 0.5, print.auc.y = 0.3)
lrROC <- roc(test$Purchased~predict3,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(test$Purchased~as.numeric(predict3),plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
AUC(predict3,test$Purchased)
lrROC <- roc(test$Purchased~as.numeric(predict3),plot=TRUE,print.auc=TRUE,col="green",lwd =4,main="ROC Curves")
roc(test$Purchased~as.numeric(predict3),plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
data <- read.csv("social.csv")#,stringsAsFactors = TRUE)
summary(data)
df[col] <- (df[col]-min(df[col]))/(max(df[col])-min(df[col]))
normalisation <- function(df,col){
df[col] <- (df[col]-min(df[col]))/(max(df[col])-min(df[col]))
df
}
data <- data[-1]
data$Gender <- ifelse(data$Gender=="Male",1,0)
data0 <- normalisation(data,"EstimatedSalary")
sample <- sample.split(data0$Purchased,.7)
train <- data0[sample,]
test <- data0[!sample,]
predict1 <- predict(model1,test,type="response")
#svm with default parameters
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test,type="response")
summary(model1)
Accuracy(predict1,test$Purchased)
AUC(predict1,test$Purchased)
predict1
#hyper parameter tuning
tune.model <- tune(svm,Purchased~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
#hyper parameter tuning
tune.model <- tune(svm,as.factor(Purchased)~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
summary(tune.model)
model2 <- svm(Purchased~.,data = train,type="C",cost=10,kernel="radial")
predict2 <- predict(model2,test)#,type="response")
summary(model2)
ConfusionMatrix(predict2,test$Purchased)
Accuracy(predict2,test$Purchased)
AUC(predict2,test$Purchased)
tune.model1 <- tune(svm,Purchased~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=seq(0,1,.1)))
summary(tune.model1)
tune.model1 <- tune(svm,Purchased~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=seq(0,1,.1)))
tune.model1 <- tune(svm,as.factor(Purchased)~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=seq(0,1,.1)))
summary(tune.model1)
model2 <- svm(Purchased~.,data = train,type="C",cost=10,kernel="radial")
predict2 <- predict(model2,test)#,type="response")
summary(model2)
ConfusionMatrix(predict2,test$Purchased)
Accuracy(predict2,test$Purchased)
AUC(predict2,test$Purchased)
model3 <- svm(Purchased~.,data = train,type="C",cost=1,kernel="radial",gamma=0.6)
predict3 <- predict(model3,test)#,type="response")
summary(model3)
ConfusionMatrix(predict3,test$Purchased)
Accuracy(predict3,test$Purchased)
AUC(predict3,test$Purchased)
roc_svm_test <- roc(test$Purchased,as.numeric(predict3))
roc(test$Purchased~as.numeric(predict3),plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
m2 <- roc(test$Purchased~as.numeric(predict2),plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
m3 <- roc(test$Purchased~as.numeric(predict3),plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE,add=TRUE)
m1 <- roc(test$Purchased~as.numeric(predict1),plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
m3 <- roc(test$Purchased~as.numeric(predict3),plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE,add=TRUE)
m1 <- roc(test$Purchased~as.numeric(predict1),plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
m3 <- roc(test$Purchased~as.numeric(predict3),plot=TRUE,print.auc=TRUE,col="blue",lwd =4,print.auc.y=0.4,legacy.axes=TRUE,add=TRUE)
legend("bottomright",legend=c("m1","m3"),col=c("green","blue"),lwd=4)
setwd("C:/Users/91903/Desktop/Projects/SVM")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(caTools)
library(corrplot)
library(MLmetrics)
library(e1071)
data_0 <- read.csv("Social_Network_Ads.csv", stringsAsFactors = TRUE) #converting all strings to factors
#peeping into data
head(data_0)
# dimension of the dataset
dim(data_0)
# structure of the dataset
str(data_0)
summary(data_0)
null_cols <- colSums(is.na(data_0))/nrow(data_0)*100
null_cols[null_cols!=0]
normalisation <- function(df,col){
#`custom function for min-max normalization
df[col] <- (df[col]-min(df[col]))/(max(df[col])-min(df[col]))
df
}
#normalizing EstimatedSalary
data_1 <- normalisation(data_0,"EstimatedSalary")
data_1 <- data_1 %>% select(!User.ID)
#Convering Gender to binary
data_1$Gender <- ifelse(data_1$Gender=="Male",1,0)
data_1 <- data_1 %>% rename(Gender=Male)
data_1 %>% rename(Gender=Male)
data_1 %>% rename(Male=Gender)
#renaming the column to Male
data_1 <- data_1 %>% rename(Male=Gender)
#normalizing EstimatedSalary
data_1 <- normalisation(data_0,"EstimatedSalary")
#dropping User.ID
data_1 <- data_1 %>% select(!User.ID)
#Converting Gender to binary
data_1$Gender <- ifelse(data_1$Gender=="Male",1,0)
#renaming the column to Male
data_1 <- data_1 %>% rename(Male=Gender)
#look into data
head(data_1)
#normalizing EstimatedSalary
#data_1 <- normalisation(data_0,"EstimatedSalary")
#dropping User.ID
data_1 <- data_1 %>% select(!User.ID)
library(tidyverse)
library(reshape2)
library(caTools)
library(corrplot)
library(MLmetrics)
library(e1071)
data_0 <- read.csv("Social_Network_Ads.csv", stringsAsFactors = TRUE) #converting all strings to factors
library(tidyverse)
library(reshape2)
library(caTools)
library(corrplot)
library(MLmetrics)
library(e1071)
data_0 <- read.csv("Social_Network_Ads.csv", stringsAsFactors = TRUE) #converting all strings to factors
#peeping into data
head(data_0)
# dimension of the dataset
dim(data_0)
# structure of the dataset
str(data_0)
summary(data_0)
null_cols <- colSums(is.na(data_0))/nrow(data_0)*100
null_cols[null_cols!=0]
normalisation <- function(df,col){
#`custom function for min-max normalization
df[col] <- (df[col]-min(df[col]))/(max(df[col])-min(df[col]))
df
}
#normalizing EstimatedSalary
#data_1 <- normalisation(data_0,"EstimatedSalary")
#dropping User.ID
data_1 <- data_1 %>% select(!User.ID)
#normalizing EstimatedSalary
#data_1 <- normalisation(data_0,"EstimatedSalary")
#dropping User.ID
data_1 <- data_0 %>% select(!User.ID)
#Converting Gender to binary
data_1$Gender <- ifelse(data_1$Gender=="Male",1,0)
#renaming the column to Male
data_1 <- data_1 %>% rename(Male=Gender)
#look into data
head(data_1)
#normalizing EstimatedSalary
#data_1 <- normalisation(data_0,"EstimatedSalary")
#dropping User.ID
data_1 <- data_0 %>% select(!User.ID)
#Converting Gender to binary
data_1$Gender <- ifelse(data_1$Gender=="Male",1,0)
#renaming the column to Male
data_1 <- data_1 %>% rename(Male=Gender)
#converting Purchased into a factor
data_0$Purchased <- as.factor(data_0$Purchased)
#look into data
head(data_1)
#normalizing EstimatedSalary
#data_1 <- normalisation(data_0,"EstimatedSalary")
#dropping User.ID
data_1 <- data_0 %>% select(!User.ID)
#Converting Gender to binary
data_1$Gender <- ifelse(data_1$Gender=="Male",1,0)
#renaming the column to Male
data_1 <- data_1 %>% rename(Male=Gender)
#converting Purchased into a factor
data_1$Purchased <- as.factor(data_1$Purchased)
#look into data
head(data_1)
data_1 %>% ggplot(aes(Male))+geom_bar()
names(data_1)
data_1 %>% ggplot(aes(EstimatedSalary))+geom_boxplot(aes(fill=Male))
data_1 %>% ggplot(aes(EstimatedSalary))+geom_boxplot(aes(Male))
data_1 %>% ggplot(aes(EstimatedSalary))+geom_boxplot(aes(fill=Male))
data_1 %>% ggplot(aes(EstimatedSalary))+geom_boxplot(aes(fill=as.factor(Male)))
data_1 %>% ggplot(aes(Age))+geom_bar()
data_1 %>% ggplot(aes(Age))+geom_bar()
data_1 %>% ggplot(aes(Age))+geom_histogram()
data_1 %>% ggplot(aes(Age))+geom_bar()
data_1 %>% ggplot(aes(EstimatedSalary))+geom_boxplot()
data_1 %>% ggplot(aes(Purchased))+geom_bar()
data_1 %>% ggplot(aes(EstimatedSalary))+geom_boxplot(aes(fill=as.factor(Male)))
data_1 %>% ggplot(aes(Age))+geom_bar(aes(fill=Purchased),position = "dodge")
data_1 %>% ggplot(aes(EstimatedSalary))+geom_histogram(aes(fill=Male))+facet_wrap(~Purchased)
data_1 %>% ggplot(aes(EstimatedSalary))+geom_histogram(aes(fill=Purchased))+facet_wrap(~Male)
data_1 %>% ggplot(aes(EstimatedSalary))+geom_histogram(aes(fill=Purchased),position = "dodge")+facet_wrap(~Male)
data_1 %>% ggplot(aes(salary,Age))+geom_point()
data_1 %>% ggplot(aes(EstimatedSalary,Age))+geom_point()
data_1 %>% ggplot(aes(EstimatedSalary,Age))+geom_point(aes(color=Purchased))
data_1 %>% ggplot(aes(EstimatedSalary,Age))+geom_point(aes(color=Male))
data_1 %>% ggplot(aes(EstimatedSalary,Age))+geom_point(aes(color=as.factor(Male)))
#we have only two numeric columns
cor(data_1$Age,data_1$EstimatedSalary)
data_1 <- normalisation(data_1,"EstimatedSalary")
head(data_1)
sample <- sample.split(data_1$Purchased,.7)
train <- data_1[sample,]
test <- data_1[!sample,]
dim(train)
dim(test)
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test,type="response")
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
Accuracy(predict1,test$Purchased)
AUC(predict1,test$Purchased)
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test)
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
Accuracy(predict1,test$Purchased)
AUC(predict1,test$Purchased)
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test)
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
paste("Accuracy:",Accuracy(predict1,test$Purchased))
AUC(predict1,test$Purchased)
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test)
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
paste("Accuracy:",Accuracy(predict1,test$Purchased))
paste("AUC",AUC(predict1,test$Purchased))
tune.model <- tune(svm,as.factor(Purchased)~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
summary(tune.model)
tune.model$best.parameters
tune.model$best.model
tune.model$best.parameters
tune.model <- tune(svm,as.factor(Purchased)~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
print(tune.model$best.model)
tune.model1 <- tune(svm,as.factor(Purchased)~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=seq(0,1,.1)))
print(tune.model1$best.model)
tune.model1 <- tune(svm,as.factor(Purchased)~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=seq(0,1,.1)))
print(tune.model1$best.model)
tune.model1 <- tune(svm,as.factor(Purchased)~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=seq(0,1,.1)))
print(tune.model1$best.model)
print(tune.model1$best.parameters)
tune.model <- tune(svm,as.factor(Purchased)~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
print(tune.model$best.model)
print(tune.model$best.parameters)
tune.model <- tune(svm,as.factor(Purchased)~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
print(tune.model$best.model)
print(tune.model$best.parameters)
print(tune.model$best.performance)
tune.model1 <- tune(svm,as.factor(Purchased)~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=seq(0,1,.1)))
print(tune.model1$best.model)
print(tune.model1$best.parameters)
print(tune.model1$best.performance)
set.seed(123) #to prevent the sampling of test ste differently every time we run the markdown
sample <- sample.split(data_1$Purchased,.7)
train <- data_1[sample,]
test <- data_1[!sample,]
dim(train)
dim(test)
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test)
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
paste("Accuracy:",Accuracy(predict1,test$Purchased))
paste("AUC",AUC(predict1,test$Purchased))
set.seed(123) #to prevent the sampling of test ste differently every time we run the markdown
sample <- sample.split(data_1$Purchased,.7)
train <- data_1[sample,]
test <- data_1[!sample,]
dim(train)
dim(test)
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test)
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
paste("Accuracy:",Accuracy(predict1,test$Purchased))
paste("AUC",AUC(predict1,test$Purchased))
tune.model <- tune(svm,as.factor(Purchased)~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
print(tune.model$best.model)
print(tune.model$best.parameters)
print(tune.model$best.performance)
tune.model1 <- tune(svm,as.factor(Purchased)~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=seq(0,1,.1)))
print(tune.model1$best.model)
print(tune.model1$best.parameters)
print(tune.model1$best.performance)
model2 <- svm(Purchased~.,data = train,type="C",cost=1,kernel="radial",gamma=0.8)
predict2 <- predict(model2,test)#,type="response")
summary(model2)
ConfusionMatrix(predict2,test$Purchased)
paste("Accuracy ",Accuracy(predict2,test$Purchased))
paste("AUC",AUC(predict2,test$Purchased))
#set.seed(123) #to prevent the sampling of test ste differently every time we run the markdown
sample <- sample.split(data_1$Purchased,.7)
train <- data_1[sample,]
test <- data_1[!sample,]
dim(train)
dim(test)
model1 <- svm(Purchased~.,data = train,type="C")
predict1 <- predict(model1,test)
summary(model1)
ConfusionMatrix(predict1,test$Purchased)
paste("Accuracy:",Accuracy(predict1,test$Purchased))
paste("AUC",AUC(predict1,test$Purchased))
tune.model <- tune(svm,as.factor(Purchased)~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
print(tune.model$best.model)
print(tune.model$best.parameters)
print(tune.model$best.performance)
tune.model1 <- tune(svm,as.factor(Purchased)~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=seq(0,1,.1)))
print(tune.model1$best.model)
print(tune.model1$best.parameters)
print(tune.model1$best.performance)
model2 <- svm(Purchased~.,data = train,type="C",cost=10,kernel="radial",gamma=0.3)
predict2 <- predict(model2,test)#,type="response")
summary(model2)
ConfusionMatrix(predict2,test$Purchased)
paste("Accuracy ",Accuracy(predict2,test$Purchased))
paste("AUC",AUC(predict2,test$Purchased))
tune.model1 <- tune(svm,as.factor(Purchased)~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-2:3),
gamma=seq(0,1,.1)))
print(tune.model1$best.model)
print(tune.model1$best.parameters)
print(tune.model1$best.performance)
model2 <- svm(Purchased~.,data = train,type="C",cost=10,kernel="radial",gamma=0.7)
predict2 <- predict(model2,test)#,type="response")
summary(model2)
ConfusionMatrix(predict2,test$Purchased)
paste("Accuracy ",Accuracy(predict2,test$Purchased))
paste("AUC",AUC(predict2,test$Purchased))
tune.model <- tune(svm,as.factor(Purchased)~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial"),
gamma=seq(0,1,.1)))
tune.model <- tune(svm,as.factor(Purchased)~.,data = train,type="C",ranges = list(cost=10^(-2:3),
kernel=c("linear","radial","polynomial")))
print(tune.model$best.model)
print(tune.model$best.parameters)
print(tune.model$best.performance)
tune.model1 <- tune(svm,as.factor(Purchased)~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-3:5),
gamma=seq(0,1,.1)))
print(tune.model1$best.model)
print(tune.model1$best.parameters)
print(tune.model1$best.performance)
set.seed(123)
tune.model1 <- tune(svm,as.factor(Purchased)~.,data = train,type="C",kernel="radial",ranges = list(cost=10^(-3:5),
gamma=seq(0,1,.1)))
print(tune.model1$best.model)
print(tune.model1$best.parameters)
print(tune.model1$best.performance)
tune.model1$best.parameter
tune.model1$best.parameter[1]
tune.model1$best.parameters[1]
tune.model1$best.parameters[2]
list(tune.model1$best.parameters)[1]
model2 <- svm(Purchased~.,data = train,type="C",cost=tune.model1$best.parameters[1],kernel="radial",gamma=tune.model1$best.parameters[2])
predict2 <- predict(model2,test)
summary(model2)
list(tune.model1$best.parameters)[[1]]
list(tune.model1$best.parameters)
tune.model1$best.parameters$cost
model2 <- svm(Purchased~.,data = train,type="C",cost=tune.model1$best.parameters$cost,kernel="radial",gamma=tune.model1$best.parameters$gamma)
predict2 <- predict(model2,test)
summary(model2)
ConfusionMatrix(predict2,test$Purchased)
paste("Accuracy ",Accuracy(predict2,test$Purchased))
paste("AUC",AUC(predict2,test$Purchased))
